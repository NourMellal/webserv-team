# Name that appears in GitHub Actions tab
name: Webserv CI/CD Pipeline

# Define when this workflow runs - on push to main/master branches and on pull requests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Define the individual jobs in the workflow
jobs:
  # First job: Build and test your Docker container
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner environment
    steps:
    # Step 1: Get your code from the repository
    - name: Checkout code
      uses: actions/checkout@v3
      
    # Step 2: Set up Docker Buildx (enhanced Docker build capabilities)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    # Step 3: Build your Docker image but don't push it yet
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .           # Build context is the current directory
        push: false          # Don't push, just build
        load: true           # Load the image into Docker locally for testing
        tags: webserv:test   # Tag for the test image
        cache-from: type=gha # Use GitHub Actions cache
        cache-to: type=gha,mode=max
      
    # Step 4: Run your container and test if it's working
    - name: Test container
      run: |
        # Start the container in background
        docker run -d -p 5050:5050 --name test-webserv webserv:test
        # Wait for service to start
        sleep 10
        # Test if the server responds properly
        curl -f http://localhost:5050/ || exit 1
        echo "Container test passed successfully!"
        
  # Second job: Deploy your container (only runs after build-and-test succeeds)
  deploy:
    needs: build-and-test  # This ensures deploy only runs if tests pass
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'  # Only deploy on main/master
    runs-on: ubuntu-latest
    steps:
    # Step 1: Get your code
    - name: Checkout repository
      uses: actions/checkout@v3
      
    # Step 2: Log in to Docker Hub using your secrets
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Uses the secret you'll create
        password: ${{ secrets.DOCKER_TOKEN }}     # Uses the secret you'll create
        
    # Step 3: Build and push your Docker image to Docker Hub
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .                                       # Build context is the current directory
        push: true                                       # Actually push to Docker Hub this time
        tags: ${{ secrets.DOCKER_USERNAME }}/webserv:latest,${{ secrets.DOCKER_USERNAME }}/webserv:${{ github.sha }}  # Tag with latest and commit SHA

